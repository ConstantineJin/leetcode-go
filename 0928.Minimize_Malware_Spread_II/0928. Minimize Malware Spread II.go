package main

import "slices"

func minMalwareSpread(graph [][]int, initial []int) int {
	var n = len(graph)
	var visited, isInitial = make([]bool, n), make([]bool, n)
	for _, i := range initial {
		isInitial[i] = true
	}
	var size, nodeId int // nodeId状态机同0924
	var dfs func(x int)
	dfs = func(x int) {
		visited[x] = true
		size++
		for y, v := range graph[x] {
			if v == 1 {
				if isInitial[y] {
					if nodeId == -1 {
						nodeId = y
					} else if nodeId != y { // 避免重复统计
						nodeId = -2
					}
				} else if !visited[y] { // 只DFS不在initial中的节点
					dfs(y)
				}
			}
		}
	}
	var cnt = make([]int, n)
	for i, visit := range visited {
		if !visit && !isInitial[i] { // 逆向思维，从未访问过且不在initial中的节点开始DFS
			nodeId, size = -1, 0
			dfs(i)
			if nodeId >= 0 { // 恰好有一个在initial中的节点
				cnt[nodeId] += size // 删除nodeId节点可使size个节点不受感染
			}
		}
	}
	var maxCnt, minNodeId = 0, -1
	for i, c := range cnt {
		if c > maxCnt || c == maxCnt && i < minNodeId {
			maxCnt, minNodeId = cnt[i], i
		}
	}
	if minNodeId < 0 {
		return slices.Min(initial)
	}
	return minNodeId
}
